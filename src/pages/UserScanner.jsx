import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { Html5QrcodeScanner, Html5QrcodeScanType } from 'html5-qrcode';
import './UserScanner.css';

export default function UserScanner() {
    const navigate = useNavigate();
    const [userQRCode, setUserQRCode] = useState('');
    const [userData, setUserData] = useState(null);
    const [statusMessage, setStatusMessage] = useState('');
    const [scannerInstance, setScannerInstance] = useState(null);
    const [isLoading, setIsLoading] = useState(false);
    const [showManualInput, setShowManualInput] = useState(false);
    const [manualInput, setManualInput] = useState('');
    const [scannerReady, setScannerReady] = useState(false);
    const scannerRef = useRef(null);
    const scannerContainerRef = useRef(null);

    // Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤
    const getMajorName = (majorCode) => {
        const majorMap = {
            "ME": "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏•",
            "EE": "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£",
            "CYBER": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ó‡∏≤‡∏á‡πÑ‡∏ã‡πÄ‡∏ö‡∏≠‡∏£‡πå",
            "SCIEN": "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ (EN)",
            "CE": "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡πÇ‡∏¢‡∏ò‡∏≤",
            "GEO": "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà",
            "IE": "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏≤‡∏£",
            "SCI": "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ",
            "SOC": "‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤"
        };
        return majorMap[majorCode] || majorCode;
    };

    // Mobile optimization state
    const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);
    const [isScanning, setIsScanning] = useState(false);

    // Detect mobile changes
    useEffect(() => {
        const handleResize = () => {
            setIsMobile(window.innerWidth <= 768);
        };
        window.addEventListener('resize', handleResize);
        return () => window.removeEventListener('resize', handleResize);
    }, []);

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô QR Scanner
    useEffect(() => {
        setScannerReady(true);
        return () => {
            // Cleanup scanner ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component unmount
            if (scannerRef.current) {
                try {
                    scannerRef.current.clear().catch(console.error);
                } catch (error) {
                    console.error('Error cleaning up scanner:', error);
                }
                scannerRef.current = null;
            }
            if (scannerContainerRef.current) {
                scannerContainerRef.current.innerHTML = '';
            }
        };
    }, []);

    // Effect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤)
    // useEffect(() => {
    //     if (userData && scannerInstance) {
    //         console.log('User data detected, forcing camera stop...');
    //         setTimeout(() => {
    //             stopCamera();
    //         }, 100);
    //     }
    // }, [userData, scannerInstance]);

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô QR Code
    const handleQRCodeScan = async (decodedText) => {
        console.log('Scanned QR Code:', decodedText);
        
        if (userQRCode === decodedText) {
            // QR Code ‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÉ‡∏´‡∏°‡πà
            return;
        }

        // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô DOM conflict
        await stopCamera();

        setUserQRCode(decodedText);
        setStatusMessage(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏£‡∏´‡∏±‡∏™ QR: ${decodedText}`);
        
        await fetchUserData(decodedText);
    };

    // ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡πÅ‡∏Å‡∏ô
    const stopCamera = async () => {
        if (scannerRef.current) {
            try {
                await scannerRef.current.clear();
                console.log('Scanner cleared successfully');
            } catch (error) {
                console.error('Error clearing scanner:', error);
            }
            scannerRef.current = null;
        }
        
        if (scannerContainerRef.current) {
            // Force clear the container
            scannerContainerRef.current.innerHTML = '';
        }
        
        setScannerInstance(null);
        setIsScanning(false);
    };

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å API
    const fetchUserData = async (searchTerm) => {
        setIsLoading(true);
        console.log('Frontend: Searching for:', searchTerm);
        
        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (User ID) ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠
            const isNumeric = /^\d+$/.test(searchTerm.trim());
            const queryParam = isNumeric ? 'userQRCode' : 'userName';
            const apiUrl = `/api/get-user-details?${queryParam}=${encodeURIComponent(searchTerm)}`;
            
            console.log('Frontend: API URL:', apiUrl);
            console.log('Frontend: Search type:', isNumeric ? 'User ID' : 'User Name');
            
            const response = await fetch(apiUrl);
            const data = await response.json();
            
            console.log('Frontend: API Response:', data);
            
            if (data.success) {
                // ‡πÉ‡∏ä‡πâ setTimeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ React update state ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å DOM ‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
                setTimeout(() => {
                    setUserData({
                        userid: data.userid || searchTerm,
                        realname: data.realname,
                        gunNumber: data.gunNumber || 'N/A',
                        ...data // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                    });
                    
                    setShowManualInput(false); // ‡∏ã‡πà‡∏≠‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á
                    
                    const searchType = isNumeric ? '‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß' : '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';
                    setStatusMessage(`‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å${searchType}: ${data.realname}`);
                    
                    console.log('Found user data successfully');
                }, 100);
                
            } else {
                setUserData(null);
                const searchType = isNumeric ? '‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß' : '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';
                const errorMsg = data.message || `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å${searchType}: ${searchTerm}`;
                setStatusMessage(`‚ùå ${errorMsg}`);
                console.log('Frontend: User not found:', errorMsg);
            }
        } catch (error) {
            console.error('Frontend: Error fetching user data:', error);
            setUserData(null);
            setStatusMessage(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: ${error.message}`);
        } finally {
            setIsLoading(false);
        }
    };

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á
    const handleManualSubmit = (e) => {
        e.preventDefault();
        if (manualInput.trim()) {
            const searchTerm = manualInput.trim();
            setUserQRCode(searchTerm);
            
            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            const isNumeric = /^\d+$/.test(searchTerm);
            const searchType = isNumeric ? '‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß' : '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';
            setStatusMessage(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å${searchType}: ${searchTerm}`);
            
            fetchUserData(searchTerm);
            setShowManualInput(false);
        }
    };

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô - ‡πÉ‡∏ä‡πâ ref ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô React DOM conflict
    const startCamera = async () => {
        // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á scan ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î
        if (isScanning && scannerRef.current) {
            await stopCamera();
            return;
        }
        
        if (!scannerContainerRef.current) {
            console.error('Scanner container ref not available');
            return;
        }
        
        // ‡∏•‡πâ‡∏≤‡∏á container ‡∏Å‡πà‡∏≠‡∏ô
        scannerContainerRef.current.innerHTML = '';
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö browser support ‡∏Å‡πà‡∏≠‡∏ô
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            setStatusMessage('‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á');
            return;
        }

        // ‡∏Ç‡∏≠ permission ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô
        try {
            await navigator.mediaDevices.getUserMedia({ 
                video: { 
                    facingMode: 'environment' // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ô Android
                } 
            });
        } catch (error) {
            console.error('Camera permission error:', error);
            setStatusMessage('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á');
            return;
        }

        // Mobile-optimized scanner configuration
        const scannerConfig = {
            fps: isMobile ? 5 : 10,
            qrbox: isMobile 
                ? { width: Math.min(300, window.innerWidth - 40), height: Math.min(300, window.innerWidth - 40) }
                : { width: 250, height: 250 },
            aspectRatio: 1.0,
            supportedScanTypes: [Html5QrcodeScanType.SCAN_TYPE_CAMERA],
            videoConstraints: {
                facingMode: 'environment',
                width: isMobile ? { ideal: 640 } : { ideal: 1280 },
                height: isMobile ? { ideal: 480 } : { ideal: 720 }
            }
        };

        try {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á unique ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö scanner instance ‡∏ô‡∏µ‡πâ
            const uniqueId = `scanner-${Date.now()}`;
            scannerContainerRef.current.id = uniqueId;
            
            const qrCodeScanner = new Html5QrcodeScanner(uniqueId, scannerConfig);
            scannerRef.current = qrCodeScanner;
            setScannerInstance(qrCodeScanner);
            setIsScanning(true);

            qrCodeScanner.render(
                (decodedText) => {
                    // Haptic feedback for mobile
                    if (navigator.vibrate && isMobile) {
                        navigator.vibrate(200);
                    }
                    
                    console.log('QR Code scanned:', decodedText);
                    handleQRCodeScan(decodedText);
                },
                (errorMessage) => {
                    // Ignore common scanning errors
                    if (!errorMessage.includes("No QR code found") && !errorMessage.includes("QR code parse error")) {
                        console.log('Scan failed:', errorMessage);
                        if (errorMessage.includes('NotAllowedError')) {
                            setStatusMessage('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á');
                        } else if (errorMessage.includes('NotFoundError')) {
                            setStatusMessage('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á');
                        } else if (errorMessage.includes('NotReadableError')) {
                            setStatusMessage('‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÅ‡∏≠‡∏õ‡∏≠‡∏∑‡πà‡∏ô');
                        }
                    }
                }
            );
        } catch (error) {
            console.error('Error starting scanner:', error);
            setStatusMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á');
            setIsScanning(false);
        }
    };

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const resetData = async () => {
        console.log('Resetting data...');
        
        // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï state
        setUserQRCode('');
        setUserData(null);
        setStatusMessage('');
        setManualInput('');
        setShowManualInput(false);
        setIsLoading(false);
        
        // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô
        await stopCamera();
        
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏¢‡∏∏‡∏î
        setTimeout(() => {
            if (scannerReady && !showManualInput) {
                startCamera();
            }
        }, 300);
    };

    // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏° User ID
    const goToDeductPoint = () => {
        if (userData && userData.userid) {
            // ‡∏™‡πà‡∏á User ID ‡πÄ‡∏õ‡πá‡∏ô query parameter
            navigate(`/DeductPoint?userId=${encodeURIComponent(userData.userid)}&userName=${encodeURIComponent(userData.realname)}`);
        }
    };

    return (
        <div className="user-scanner-container">
            <div className="user-scanner-header">
                <h1>üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h1>
                <p>‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏Å User ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</p>
            </div>

            <div className="scanner-section">
                <div className="scanner-controls">
                    <button 
                        type="button" 
                        className="toggle-manual-btn"
                        onClick={() => setShowManualInput(!showManualInput)}
                    >
                        {showManualInput ? 'üì± ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏™‡πÅ‡∏Å‡∏ô QR' : '‚å®Ô∏è ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏á'}
                    </button>
                    
                    <button 
                        type="button" 
                        className="reset-btn"
                        onClick={resetData}
                    >
                        üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
                    </button>
                </div>

                {showManualInput ? (
                    <div className="manual-input-section">
                        <form onSubmit={handleManualSubmit} className="manual-form">
                            <input
                                type="text"
                                placeholder="‡∏Å‡∏£‡∏≠‡∏Å User ID ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
                                value={manualInput}
                                onChange={(e) => setManualInput(e.target.value)}
                                className="manual-input"
                                autoFocus
                            />
                            <button type="submit" className="search-btn">
                                üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                            </button>
                        </form>
                        <div className="search-hint">
                            üí° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ User ID (‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß) ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏î‡πâ
                        </div>
                    </div>
                ) : (
                    <div className="qr-scanner-wrapper">
                        <div 
                            ref={scannerContainerRef}
                            id="user-qr-reader" 
                            className="qr-reader"
                            style={{ minHeight: isScanning ? '300px' : '50px' }}
                        ></div>
                        <button 
                            onClick={() => startCamera()}
                            className="qr-scan-btn"
                            disabled={isLoading}
                            style={{
                                background: isLoading ? '#f3f4f6' : isScanning ? '#dc2626' : '#3b82f6',
                                color: isLoading ? '#9ca3af' : 'white',
                                border: '1px solid #d1d5db',
                                borderRadius: '8px',
                                padding: '12px 24px',
                                cursor: isLoading ? 'not-allowed' : 'pointer',
                                fontSize: '16px',
                                fontWeight: '500',
                                width: '100%',
                                margin: '8px 0'
                            }}
                        >
                            {isLoading 
                                ? "üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á..." 
                                : isScanning 
                                    ? "üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡πÅ‡∏Å‡∏ô QR Code" 
                                    : "üì∑ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏™‡πÅ‡∏Å‡∏ô QR Code"
                            }
                        </button>
                        <div className="qr-help-text">
                            üí° {isMobile 
                                ? isScanning 
                                    ? "üì± ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß - ‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" 
                                    : "‡∏´‡∏°‡∏∏‡∏ô‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πÅ‡∏Å‡∏ô"
                                : isScanning 
                                    ? "üé• ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß - ‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢"
                                    : "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
                            }
                        </div>
                        
                        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß */}
                        {userData && isScanning && (
                            <button 
                                onClick={() => stopCamera()}
                                style={{
                                    background: '#10b981',
                                    color: 'white',
                                    border: 'none',
                                    borderRadius: '8px',
                                    padding: '10px 20px',
                                    cursor: 'pointer',
                                    fontSize: '14px',
                                    fontWeight: '500',
                                    width: '100%',
                                    marginTop: '10px'
                                }}
                            >
                                ‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á (‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß)
                            </button>
                        )}
                    </div>
                )}
            </div>



            {/* Status Message */}
            {statusMessage && (
                <div className={`status-message ${isLoading ? 'loading' : ''}`}>
                    {isLoading && <div className="spinner"></div>}
                    {statusMessage}
                </div>
            )}


            {/* Current Scanned QR */}
            {userQRCode && (
                <div className="current-qr">
                    <strong>üéØ User ID ‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô:</strong> 
                    <span className="qr-value">{userQRCode}</span>
                </div>
            )}

            {/* User Data Display */}
            {userData && (
                <div className="user-data-card">
                    <div className="user-data-header">
                        <h2>üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h2>
                    </div>
                    
                    <div className="user-data-content">
                        <div className="user-data-row">
                            <span className="label">üÜî User ID:</span>
                            <span className="value">{userData.userid}</span>
                        </div>
                        
                        <div className="user-data-row">
                            <span className="label">üë®‚Äçüíº ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</span>
                            <span className="value">{userData.realname}</span>
                        </div>
                        
                        <div className="user-data-row">
                            <span className="label">üî´ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏õ‡∏∑‡∏ô:</span>
                            <span className="value gun-number">
                                {userData.gunNumber === 'N/A' || !userData.gunNumber ? 
                                    <span className="no-gun">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏∑‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î</span> : 
                                    userData.gunNumber
                                }
                            </span>
                        </div>
                        
                        {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° */}
                        {userData.major && userData.major !== 'N/A' && (
                            <div className="user-data-row">
                                <span className="label">üéì ‡∏™‡∏≤‡∏Ç‡∏≤:</span>
                                <span className="value">{getMajorName(userData.major)}</span>
                            </div>
                        )}
                        
                        {userData.role && (
                            <div className="user-data-row">
                                <span className="label">üëî ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó:</span>
                                <span className="value role">
                                    {userData.role === 'student' && 'üéì ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'}
                                    {userData.role === 'teacher' && 'üë®‚Äçüè´ ‡∏Ñ‡∏£‡∏π'}
                                    {userData.role === 'officer' && 'üëÆ‚Äç‚ôÇÔ∏è ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà'}
                                    {userData.role === 'admin' && 'üëë ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö'}
                                </span>
                            </div>
                        )}
                        
                        {userData.point !== undefined && (
                            <div className="user-data-row">
                                <span className="label">‚≠ê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô:</span>
                                <span className="value points">{userData.point} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</span>
                            </div>
                        )}
                        
                        {userData.blood && userData.blood !== 'N/A' && (
                            <div className="user-data-row">
                                <span className="label">ü©∏ ‡∏Å‡∏£‡∏∏‡πä‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏î:</span>
                                <span className="value blood">{userData.blood}</span>
                            </div>
                        )}
                        
                        {userData.year && (
                            <div className="user-data-row">
                                <span className="label">üìÖ ‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏µ:</span>
                                <span className="value">{userData.year}</span>
                            </div>
                        )}
                        
                        {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πà‡∏ß‡∏¢ */}
                        {(userData.battalion || userData.company || userData.platoon || userData.squad) && (
                            <div className="unit-info">
                                <h4>üèõÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πà‡∏ß‡∏¢</h4>
                                {userData.battalion && (
                                    <div className="user-data-row">
                                        <span className="label">üè¢ ‡∏Å‡∏≠‡∏á‡∏û‡∏±‡∏ô:</span>
                                        <span className="value">{userData.battalion}</span>
                                    </div>
                                )}
                                {userData.company && (
                                    <div className="user-data-row">
                                        <span className="label">üè´ ‡∏Å‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏¢:</span>
                                        <span className="value">{userData.company}</span>
                                    </div>
                                )}
                                {userData.platoon && (
                                    <div className="user-data-row">
                                        <span className="label">üë• ‡∏´‡∏°‡∏π‡πà:</span>
                                        <span className="value">{userData.platoon}</span>
                                    </div>
                                )}
                                {userData.squad && (
                                    <div className="user-data-row">
                                        <span className="label">üéØ ‡∏´‡∏°‡∏ß‡∏î:</span>
                                        <span className="value">{userData.squad}</span>
                                    </div>
                                )}
                            </div>
                        )}
                    </div>
                    
                    {/* Action Buttons */}
                    <div className="user-actions">
                        <button 
                            type="button" 
                            className="deduct-point-btn"
                            onClick={goToDeductPoint}
                            title="‡∏ï‡∏±‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ"
                        >
                            ‚ûú ‡∏ï‡∏±‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ
                        </button>
                        
                        <button 
                            type="button" 
                            className="view-profile-btn"
                            onClick={() => navigate(`/view-profile?userId=${encodeURIComponent(userData.userid)}`)}
                            title="‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ"
                        >
                            üë§ ‡∏î‡∏π‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
                        </button>
                    </div>
                    
                    <div className="scan-time">
                        üìÖ ‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠: {new Date().toLocaleString('th-TH')}
                    </div>
                </div>
            )}

            {/* Instructions */}
            <div className="instructions">
                <h3>üìã ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h3>
                <ul>
                    <li>üéØ ‡∏ß‡∏≤‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏°‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô QR Code ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô</li>
                    <li>ÔøΩ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πÅ‡∏Å‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏∞‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà</li>
                    <li>üé• ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà" ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏Ñ‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ</li>
                    <li>ÔøΩüí° ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏á"</li>
                    <li>üîÑ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡πÉ‡∏´‡∏°‡πà</li>
                    <li>üì± ‡∏´‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á</li>
                </ul>
            </div>
        </div>
    );
}